Luke Hinojosa

1. The tightest bound Big O for randomIntArray() is O(n), where n is the length of the array.

2. The tightest bound Big O for arraySearchSpeed() is O(numTests * length).
    randomIntArray() + randomIntArray() + LinearSearch tests + Binary Search Tests
    O(length) + O(numTests) + O(numTests * length) + O(numTests * log(length))
    The Linear Search tests affect the tightest bound the most.

3.

Cost of one linear search = N * 5
                          = 10,000 * 5
                          = 50,000

Cost of X linear searches - X * 50,000

Cost of one-time sorting = 12 * N * log_base2(N)
                         = 12 * 10,000 * log_base2(10,000)
                         = About 1,594,525.49, so I'll say 1,594,526

Cost of one binary search = log_base2(N)
                          = log_base2(10,000)
                          = About 13.29, so I'll say 14

14 comparisons * 10 instructions/comparison = 140 instructions

Total cost for sorting and searching = X * 140 + 1,594,526

    X * 50,000 = X * 140 + 1,594,526
50,000X - 140X = 1,594,526
       49,860X = 1,594,526
             X = About 32

At 32 searches, the costs between the two are equal.

I would need to do 33 searches to make soring the array and using
binary search a more efficient method than linear search.